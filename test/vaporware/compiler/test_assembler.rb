require "vaporware"
require "test/unit"
require "tempfile"

class Vaporware::Compiler::Assembler::ELFTest < Test::Unit::TestCase
  def reference_binary = ""

  def test_to_elf
    input_file = Tempfile.open(["amd64.s"])
    input_file.puts <<~AMD64ASM
  .intel_syntax noprefix
  .globl main
main:
  push rbp
  mov rbp, rsp
  sub rsp, 0
  push 1
  push 2
  pop rdi
  pop rax
  add rax, rdi
  push rax
  push 3
  pop rdi
  pop rax
  imul rax, rdi
  push rax
  push 5
  push 4
  pop rdi
  pop rax
  sub rax, rdi
  push rax
  pop rdi
  pop rax
  cqo
  idiv rdi
  push rax
  mov rsp, rbp
  pop rbp
  ret
    AMD64ASM
    input = input_file.path

    assembler = Vaporware::Compiler::Assembler.new(input:, output: "amd64.o")
    header, null, text, data, bss, note, symtab, strtab, shstrtab = assembler.to_elf
    r_header, r_null, r_text, r_data, r_bss, r_note, r_symtab, r_strtab, r_shstrtab = readelf
    binding.irb
    assert_equal(r_header, header.unpack("C*"))
    assert_equal(r_null, null.unpack("C*"))
    assert_equal(r_data, data.unpack("C*"))
    assert_equal(r_text, text.unpack("C*"))
    assert_equal(r_bss, bss.unpack("C*"))
  end

  def readelf
    [
      [127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 62, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 64, 0, 8, 0, 7, 0],
      [],
      [85, 72, 137, 229, 72, 131, 236, 32, 72, 137, 232, 72, 131, 232, 8, 80, 106, 0, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 16, 80, 106, 1, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 24, 80, 72, 137, 232, 72, 131, 232, 8, 80, 88, 72, 139, 0, 80, 72],
      [],
      [],
      [137, 232, 72, 131, 232, 16, 80, 88, 72, 139, 0, 80, 95, 88, 72, 1, 248, 80, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 32, 80, 106, 1, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 32, 80, 88, 72, 139, 0, 80, 106, 9, 95, 88, 72, 57, 248, 15, 156, 192, 72, 15, 182, 192, 80, 88, 80, 72, 131, 248, 0, 15, 132, 144, 0, 0, 0, 72, 137,232, 72, 131, 232, 8, 80, 72, 137, 232, 72, 131, 232, 16, 80, 88, 72, 139, 0, 80, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 16, 80, 72, 137, 232, 72, 131, 232, 24, 80, 88, 72, 139, 0, 80, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 24, 80, 72, 137, 232, 72, 131, 232, 8, 80, 88, 72, 139, 0, 80, 72, 137, 232, 72, 131, 232, 16, 80, 88, 72, 139, 0, 80, 95, 88, 72, 1, 248, 80, 95, 88, 72, 137, 56, 87, 88, 72, 137, 232, 72, 131, 232, 32, 80, 72, 137, 232, 72, 131, 232, 32, 80, 88, 72, 139, 0, 80, 106, 1, 95, 88, 72, 1, 248, 80, 95, 88, 72, 137, 56, 87, 88, 233, 72, 255, 255, 255, 72, 137, 232, 72, 131, 232, 24, 80, 88, 72, 139, 0, 80, 72, 137, 236, 93, 195, 0, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 5, 0, 0, 0, 71, 78, 85, 0, 2, 0, 1, 192, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 192, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 105, 110, 0, 0, 46, 115, 121, 109, 116],
      [97, 98, 0, 46, 115, 116],
      [114, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 116, 101, 120, 116, 0, 46, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0, 46, 110, 111, 116, 101, 46, 103, 110, 117, 46, 112, 114, 111, 112, 101, 114, 116, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
  end
end
