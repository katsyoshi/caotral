class Vaporware::Compiler::Generator
  REGISTER: Array[String]

  # attr_accessor and define instance variables
  @main: bool
  attr_accessor main (): bool

  # attr_reader for instance variables
  attr_reader debug: bool
  attr_reader doned: Set[Symbol]
  attr_reader defined_methods: Set[Symbol]
  attr_reader defined_variables: Set[Symbol]
  attr_reader precompile: String
  attr_reader seq: Integer
  attr_reader shared: bool

  # temporarily using untyped types since parser.gem's rbs information is unchecked.
  attr_reader ast: RubyVM::AbstractSyntaxTree::Node

  # class methods
  def initialize: (String, precompile: String, debug: bool, shared: bool) -> void

  # instance private methods
  def already_build_methods?: -> bool
  def call_method: (RubyVM::AbstractSyntaxTree::Node, File, bool) -> void
  def comp: (String, File) -> void
  def compile_shared_option: () -> Array[String]
  def define_method_prologue: (RubyVM::AbstractSyntaxTree::Node, File) -> void
  def epilogue: (File) -> void
  def lvar: (Symbol, File) -> void
  def lvar_offset: (Symbol | nil) -> Integer
  def method: (Symbol, RubyVM::AbstractSyntaxTree::Node, File) -> void
  def prologue: (RubyVM::AbstractSyntaxTree::Node, File) -> void
  def prologue_methods: (File) -> void
  def register_var_and_method: (RubyVM::AbstractSyntaxTree::Node) -> void
  def ret: (File) -> void
  def to_asm: (RubyVM::AbstractSyntaxTree::Node, File, ?bool) -> void
  def variable_or_method?: (Symbol) -> bool
end
