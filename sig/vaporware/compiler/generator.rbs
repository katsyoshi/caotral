class Vaporware::Compiler::Generator
  REGISTER: Array[String]

  # attr_reader
  attr_reader precompile: String

  @main: bool
  @debug: bool
  @doned: Set[Symbol]
  @defined_methods: Set[Symbol]
  @defined_variables: Set[Symbol]
  @seq: Integer
  @shared: bool
  @ast: RubyVM::AbstractSyntaxTree::Node
  @source: String

  # class methods
  def initialize: (input: String, ?output: String, ?debug: bool, ?shared: bool) -> void

  # instance private methods
  def already_build_methods?: -> bool
  def call_method: (RubyVM::AbstractSyntaxTree::Node, File, bool) -> void
  def compile: () -> void
  def compile_shared_option: () -> Array[String]
  def define_method_prologue: (RubyVM::AbstractSyntaxTree::Node, File) -> void
  def epilogue: (File) -> void
  def lvar: (Symbol, File) -> void
  def lvar_offset: (Symbol | nil) -> Integer
  def method: (Symbol, RubyVM::AbstractSyntaxTree::Node, File) -> void
  def prologue: (RubyVM::AbstractSyntaxTree::Node, File) -> void
  def prologue_methods: (File) -> void
  def register_var_and_method: (RubyVM::AbstractSyntaxTree::Node?) -> void
  def ret: (File) -> void
  def to_asm: (RubyVM::AbstractSyntaxTree::Node, File, ?bool) -> void
  def variable_or_method?: (Symbol) -> bool
end
